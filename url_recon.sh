#!/bin/bash

# 定義報告檔案名稱
REPORT_FILE="url_report.txt"

# 初始化報告檔案
echo "初步網站滲透測試報告" > $REPORT_FILE
echo "=====================" >> $REPORT_FILE
echo "生成時間: $(date)" >> $REPORT_FILE
echo "" >> $REPORT_FILE

# 取得目標 URL
read -p "請輸入目標 URL（格式: http://example.com 或 https://example.com）: " TARGET_URL

# 檢查 URL 格式是否合法
if ! [[ $TARGET_URL =~ ^http(s)?://[a-zA-Z0-9.-]+$ ]]; then
    echo "無效的 URL 格式，腳本結束。"
    exit 1
fi

echo "測試目標 URL: $TARGET_URL" >> $REPORT_FILE
echo "" >> $REPORT_FILE

# 檢查目標是否在線
echo "[*] 嘗試訪問目標 URL..." | tee -a $REPORT_FILE
HTTP_STATUS=$(curl -o /dev/null -s -w "%{http_code}" $TARGET_URL)
if [[ "$HTTP_STATUS" == "200" ]]; then
    echo "目標 URL 可訪問 (HTTP 200 OK)" | tee -a $REPORT_FILE
else
    echo "目標 URL 不可訪問，HTTP 狀態碼: $HTTP_STATUS" | tee -a $REPORT_FILE
    echo "腳本結束，無法進行進一步測試。" | tee -a $REPORT_FILE
    exit 1
fi
echo "" >> $REPORT_FILE

# 執行 nmap 掃描
echo "[*] 執行 nmap 掃描，檢測開放端口和服務..." | tee -a $REPORT_FILE
nmap -p 80,443 --script=http-* $TARGET_URL >> $REPORT_FILE 2>/dev/null
echo "" >> $REPORT_FILE

# 執行 nikto 漏洞掃描
echo "[*] 執行 nikto 掃描，檢測常見漏洞..." | tee -a $REPORT_FILE
nikto -h $TARGET_URL >> $REPORT_FILE 2>/dev/null
echo "" >> $REPORT_FILE

# 嘗試檢測是否為 WordPress
echo "[*] 嘗試檢測是否為 WordPress 網站..." | tee -a $REPORT_FILE
if wpscan --url $TARGET_URL --no-banner >> $REPORT_FILE 2>/dev/null; then
    echo "檢測到目標為 WordPress 網站，並執行了相關測試。" | tee -a $REPORT_FILE
else
    echo "目標似乎不是 WordPress 網站，略過相關測試。" | tee -a $REPORT_FILE
fi
echo "" >> $REPORT_FILE

# 檢查敏感文件（如 robots.txt）
echo "[*] 檢查敏感文件（如 robots.txt 和 .git）..." | tee -a $REPORT_FILE
curl -s -I $TARGET_URL/robots.txt | grep "200 OK" &>/dev/null && echo "發現 robots.txt: $TARGET_URL/robots.txt" | tee -a $REPORT_FILE
curl -s -I $TARGET_URL/.git | grep "200 OK" &>/dev/null && echo "發現 .git 目錄: $TARGET_URL/.git" | tee -a $REPORT_FILE
echo "" >> $REPORT_FILE

# 測試完成
echo "測試完成，報告已生成: $REPORT_FILE"
